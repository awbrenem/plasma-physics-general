;+;*****************************************************************************************;;  PROCEDURE : doppler_shift.pro  ;  PURPOSE  : Computes and plots doppler shifted quantities (|k|,Ecycl,Eanom,Elandau,vphase;			  and plasma frame freq) for an input waveform (electric or magnetic) for ;			  all possible whistler wave frequencies and |k|.;;;  CALLED BY: input crib;               ;  CALLS:	read_tds_ascii.pro;      		my_min_var_rot.pro   ;			cold_dispersion.pro;;  REQUIRES:    ;               ;;  INPUT: 	field -> [n,3] electric or magnetic field vector in any coord system;			Bo -> [3] vector of background magnetic field in same coord system;			vflow -> [3] vector of background fluid flow velocity relative to observation frame;						in same coord system;			fsc -> observed frequency (Hz);			dens -> plasma e- density (cm-3);			EorB -> 'E'('B') if field is electric(magnetic);;;			epol -> Efield polarization ratio in plane perp to Bo (iEx/Ey) (Stix ch1). Only useful;					if EorB eq 'E';			nlevels -> number of color levels for plots. Defaults to 30;			plot_ps -> set to plot to postscript;;;			plot_struct -> a structure containing various plot strings. Contains following tags:;					plot_str -> a string to be plotted (not yet implemented);					coordsys -> a string with the coord system (for plotting purposes only);					plotdir -> directory to plot files to. Will be created if it doesn't exist. Only used;								if the plot_ps keyword is set.;					titleroot -> The beginning part of the plot title;					datetime -> date and time of data (for plotting purposes only);					sc -> spacecraft data comes from (for plotting purposes only);;;;	;  OUTPUT:  1. Determines E-vec, Bvec and vflow-vec in Stix coord;					zs = B/|B| ;					ys = zs x fmax/|fmax|   ;---> These are the FA unit vectors in terms of input coord;					xs = ys x zs, ;				where fmax is the maximum variance eigenvector.;				Now we can just write the (normalized) k-vector as ;					khat = [sin(theta_kb_gen),0,cos(theta_kb_gen)];			2. Calculates various quantities from cold plasma dispersion relation (|k|, cyclotron res;				energies, etc) for theta_kb_gen from 0-90 degrees. ;			3. Limits these calculated quantities to those corresponding to the appropriate range of ;				|k| determined from Doppler shift and by requiring that waves fall in whistler range.;               ;				Note that we have one additional piece of information, namely the polarization of the ;				wave in the sc frame. This limits the frequency range, for the case when k has a component;				antiparallel to vflow, to fsc<f<fce. For example, if the phase velocity is |Vp| < |vflow| then,;				for this case, the freq in plasma frame will be < fsc. It is still RH in plasma frame as long;				as f>0. However, the wave will appear as LH in sc frame unless f>fsc. Therefore I also limit;				the "high" plots to fsc<f<fce. ;;		;	NOTES:	1. It is essentially impossible to determine the exact wave frequency in plasma frame without multipoint measurements to;		determine phase velocity directly. This is because we must first know k-vec to calculate the amount of Doppler-shift. But, k-vec;		comes from cold plasma dispersion relation which requires that we know the plasma frame freq ;		a-priori. ;			2. For an event on WIND run through wind_crib.pro to get all the setup info;			3. MAKE SURE THAT YOU USE THE SAME COORD SYSTEM FOR 'FIELD', 'VFLOW', AND 'BO';;			2 tips: Get tplot data from tplot_datagrab.pro. Use sc coord. From tplot files I can get vflow and ;				B in RTN coord. ;				From this, Vec_SC_STA = [-Vec_r,Vec_n,Vec_t];					and    Vec_SC_STB = [-Vec_r,-Vec_n,-Vec_t];					for STEREO's normal orbit (not perigee passes);				Get electric field values from sctds.pro;			Wave normal angle theta_kb_gen, usually determined from cold plasma dispersion relation;				(eg cold_disperion.pro, cold_dispersion_loop.pro);			|k| can either be input or, if not, the max red and blue shift values are estimated from ;				Coroniti 82 later on in the program.;			Wave freq (Hz) in sc frame;			Density and magnetic field magnitude. ;;;------------------------------------------------------------------------------------------;	The polarization possibilities are as follows: ;	(fpf = freq plasma frame, fsc=freq sc frame, vflow=solar wind velocity, vp=phase velocity);;	First - Assume waves are RH in plasma frame;		Condition					propagation direction		polarization (sc frame)		observed freq	consensus;		-------------------------------------------------------------------------------------------------------------;		|vp*cos(theta_kV)| > vflow	sunward						RH							fsc < fpf 		(WHISTLER SOLUTION);									antisunward					RH							fsc > fpf		(WHISTLER SOLUTION);		|vp*cos(theta_kV)| < vflow	sunward						LH							fsc < fpf		(NOT OBSERVED);									antisunward					RH							fsc > fpf		(WHISTLER SOLUTION);;	Second - Assume waves are LH in plasma frame;		Condition					propagation direction		polarization (sc frame)		observed freq	consensus;		-------------------------------------------------------------------------------------------------------------;		|vp*cos(theta_kV)| > vflow	sunward						LH							fsc < fpf		(NOT OBSERVED and LH WAVE IN WHISTLER FREQ RANGE);									antisunward					LH							fsc > fpf		(NOT OBSERVED);		|vp*cos(theta_kV)| < vflow	sunward						RH							fsc < fpf		(LH WAVE IN WHISTLER FREQ RANGE);									antisunward					LH							fsc > fpf		(NOT OBSERVED);------------------------------------------------------------------------------------------;;;	So, I'll start by assuming that the waves are whistler mode, meaning that the first four;	conditions above are possible solutions, and not the second four. All are good solutions;	except the third which corresponds to a LH wave in sc frame, which is not observed. Therefore;	I'll remove any solution for fsc < fpf where vp < vflow. This is represented by the condition:;	-1 < (vflow/Vp)*cos(theta_kv) < 0 (from the Doppler-shift relation);	Also, I'll confine solutions to the;	whistler mode freq range of between 0<f<fce. ;;	Next, calculates various quantities from cold plasma ;			  dispersion relation (|k|, resonance energies, etc);			  but limiting to values corresponding to the range of |k| determined from Doppler shift;		      for each wave normal angle. ;;;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0];;   CREATED:  08/13/2009;   CREATED BY:  Aaron W. Breneman;    LAST MODIFIED:    v1.0.0;    MODIFIED BY: Version 1.2 - AWB Oct 8th, 2009 (simplified the rotations to Stix coord). Note, the old version;		(now obsolete) calculated these angles using Euler rotations. Both versions give the same results.;				  Version 1.3 - AWB Jan 19th, 2011 - Now can enter magnetic or electric wave fields.;;*****************************************************************************************;-;**************************************************************************pro plotspecs,struct,fmax_stix1=fmax_stix1,fmax_stix2=fmax_stix2,fint_stix=fint_stix;routine for making various plots. ;First plot in Stix coordchsz = 1.4chthk = 1.5SURFACE, DIST(5), /NODATA, /SAVE, XRANGE=[-1,1], $    YRANGE=[-1,1], ZRANGE=[-1,1], XSTYLE=1, $    YSTYLE=1, ZSTYLE=1, CHARSIZE=chsz, charthick=chthk, $    xtitle='X-Stix',ytitle='Y-Stix',ztitle='Z-Stix',title='B=black, vflow=purple, fmax=red, fint=orange' 	;plot vectors in Stix coordplots,[0,struct.B_stix[0]/struct.bmag],[0,struct.B_stix[1]/struct.bmag],[0,struct.B_stix[2]/struct.bmag],color=10,symsize=2.5,/t3dplots,[0,struct.vflow_stix[0]/struct.vmag],[0,struct.vflow_stix[1]/struct.vmag],[0,struct.vflow_stix[2]/struct.vmag],color=30,symsize=2.5,/t3dplots,[0,fmax_stix1[0]/struct.fmax_mag],[0,fmax_stix1[1]/struct.fmax_mag],[0,fmax_stix1[2]/struct.fmax_mag],color=254,symsize=2.5,/t3dplots,[0,fmax_stix2[0]/struct.fmax_mag],[0,fmax_stix2[1]/struct.fmax_mag],[0,fmax_stix2[2]/struct.fmax_mag],color=254,symsize=2.5,/t3dplots,[0,fint_stix[0]/struct.fint_mag],[0,fint_stix[1]/struct.fint_mag],[0,fint_stix[2]/struct.fint_mag],color=220,symsize=2.5,/t3d	;plot projections to z=0  plots,[struct.vflow_stix[0]/struct.vmag,struct.vflow_stix[0]/struct.vmag],[struct.vflow_stix[1]/struct.vmag,struct.vflow_stix[1]/struct.vmag],[0,struct.vflow_stix[2]/struct.vmag],color=10,/t3dplots,[fmax_stix1[0]/struct.fmax_mag,fmax_stix1[0]/struct.fmax_mag],[fmax_stix1[1]/struct.fmax_mag,fmax_stix1[1]/struct.fmax_mag],[0,fmax_stix1[2]/struct.fmax_mag],color=10,/t3dplots,[fmax_stix2[0]/struct.fmax_mag,fmax_stix2[0]/struct.fmax_mag],[fmax_stix2[1]/struct.fmax_mag,fmax_stix2[1]/struct.fmax_mag],[0,fmax_stix2[2]/struct.fmax_mag],color=10,/t3dplots,[fint_stix[0]/struct.fint_mag,fint_stix[0]/struct.fint_mag],[fint_stix[1]/struct.fint_mag,fint_stix[1]/struct.fint_mag],[0,fint_stix[2]/struct.fint_mag],color=10,/t3d;plot y-z projectionplot,[0,0],/nodata,title = 'B=black,vflow=purple,fmax=red,fint=orange',xtitle='Y-Stix',ytitle='Z-Stix',xrange=[-1,1],yrange=[-1,1],CHARSIZE=chsz, charthick=chthkplots,[0,struct.B_stix[1]/struct.bmag],[0,struct.B_stix[2]/struct.bmag],color=10plots,[0,fmax_stix1[1]/struct.fmax_mag],[0,fmax_stix1[2]/struct.fmax_mag],color=254plots,[0,fmax_stix2[1]/struct.fmax_mag],[0,fmax_stix2[2]/struct.fmax_mag],color=254plots,[0,fint_stix[1]/struct.fint_mag],[0,fint_stix[2]/struct.fint_mag],color=220plots,[0,struct.vflow_stix[1]/struct.Vmag],[0,struct.vflow_stix[2]/struct.Vmag],color=30;plot x-y projectionplot,[0,0],/nodata,title = 'B=black,vflow=purple,fmax=red,fint=orange',xtitle='X-Stix',ytitle='Y-Stix',xrange=[-1,1],yrange=[-1,1],CHARSIZE=chsz, charthick=chthkplots,[0,struct.B_stix[0]/struct.bmag],[0,struct.B_stix[1]/struct.bmag],color=10plots,[0,fmax_stix1[0]/struct.fmax_mag],[0,fmax_stix1[1]/struct.fmax_mag],color=254plots,[0,fmax_stix2[0]/struct.fmax_mag],[0,fmax_stix2[1]/struct.fmax_mag],color=254plots,[0,fint_stix[0]/struct.fint_mag],[0,fint_stix[1]/struct.fint_mag],color=220plots,[0,struct.vflow_stix[0]/struct.Vmag],[0,struct.vflow_stix[1]/struct.Vmag],color=30;plot x-z projectionplot,[0,0],/nodata,title = 'B=black,vflow=purple,fmax=red,fint=orange',xtitle='X-Stix',ytitle='Z-Stix',xrange=[-1,1],yrange=[-1,1],CHARSIZE=chsz, charthick=chthkplots,[0,struct.B_stix[0]/struct.bmag],[0,struct.B_stix[2]/struct.bmag],color=10plots,[0,fmax_stix1[0]/struct.fmax_mag],[0,fmax_stix1[2]/struct.fmax_mag],color=254plots,[0,fmax_stix2[0]/struct.fmax_mag],[0,fmax_stix2[2]/struct.fmax_mag],color=254plots,[0,fint_stix[0]/struct.fint_mag],[0,fint_stix[2]/struct.fint_mag],color=220plots,[0,struct.vflow_stix[0]/struct.Vmag],[0,struct.vflow_stix[2]/struct.Vmag],color=30;plot all relevant parameterschsz = 0.8plot,[0,0],/nodata,title='Parameters',xstyle=4,ystyle=4xyouts,0.3,0.83,struct.version,/normal,charsize=chszxyouts,0.3,0.80,'st' + struct.sc + ' ' + struct.datetime,/normal,charsize=chszxyouts,0.3,0.76,'CALCULATED VECTORS (' + struct.inputcoord + ' coord)',/normal,charsize=chszxyouts,0.35,0.74,'B_stix = [' + strtrim(struct.B_stix[0],2) + ',' + strtrim(struct.B_stix[1],2) + ',' + strtrim(struct.B_stix[2],2) + ']',/normal,charsize=chszxyouts,0.35,0.72,'vflow_stix = [' + strtrim(struct.vflow_stix[0],2) + ',' + strtrim(struct.vflow_stix[1],2) + ',' + strtrim(struct.vflow_stix[2],2) + ']',/normal,charsize=chszxyouts,0.35,0.70,'fmax_stix1 = [' + strtrim(fmax_stix1[0],2) + ',' + strtrim(fmax_stix1[1],2) + ',' + strtrim(fmax_stix1[2],2) + ']',/normal,charsize=chszxyouts,0.35,0.68,'fmax_stix2 = [' + strtrim(fmax_stix2[0],2) + ',' + strtrim(fmax_stix2[1],2) + ',' + strtrim(fmax_stix2[2],2) + ']',/normal,charsize=chszxyouts,0.35,0.66,'fint_stix = [' + strtrim(struct.fint_stix[0],2) + ',' + strtrim(struct.fint_stix[1],2) + ',' + strtrim(struct.fint_stix[2],2) + ']',/normal,charsize=chszxyouts,0.35,0.64,'fmin_stix = [' + strtrim(struct.fmin_stix[0],2) + ',' + strtrim(struct.fmin_stix[1],2) + ',' + strtrim(struct.fmin_stix[2],2) + ']',/normal,charsize=chszxyouts,0.3,0.60,'INPUT VECTORS (' + struct.inputcoord + ' coord)',/normal,charsize=chszxyouts,0.35,0.58,'B = [' + strtrim(struct.Bo[0],2) + ',' + strtrim(struct.Bo[1],2) + ',' + strtrim(struct.Bo[2],2) + ']',/normal,charsize=chszxyouts,0.35,0.56,'vflow = [' + strtrim(struct.vflow[0],2) + ',' + strtrim(struct.vflow[1],2) + ',' + strtrim(struct.vflow[2],2) + ']',/normal,charsize=chszxyouts,0.35,0.54,'fmax = [' + strtrim(struct.fmax[0],2) + ',' + strtrim(struct.fmax[1],2) + ',' + strtrim(struct.fmax[2],2) + ']',/normal,charsize=chszxyouts,0.35,0.52,'fint = [' + strtrim(struct.fint[0],2) + ',' + strtrim(struct.fint[1],2) + ',' + strtrim(struct.fint[2],2) + ']',/normal,charsize=chszxyouts,0.35,0.50,'fmin = [' + strtrim(struct.fmin[0],2) + ',' + strtrim(struct.fmin[1],2) + ',' + strtrim(struct.fmin[2],2) + ']',/normal,charsize=chszxyouts,0.3,0.46,'INPUT PARAMETERS (' + struct.inputcoord + ' coord)',/normal,charsize=chszxyouts,0.35,0.44,'|vflow| = ' + strtrim(struct.vmag,2) + ' km/sec',/normal,charsize=chszxyouts,0.35,0.42,'|B| = ' + strtrim(struct.bmag,2) + ' nT',/normal,charsize=chszxyouts,0.35,0.40,'|fmax| = ' + strtrim(struct.fmax_mag,2) + ' mV/m',/normal,charsize=chszxyouts,0.35,0.38,'|fint| = ' + strtrim(struct.fint_mag,2) + ' mV/m',/normal,charsize=chszxyouts,0.35,0.36,'|fmin| = ' + strtrim(struct.fmin_mag,2) + ' mV/m',/normal,charsize=chszxyouts,0.35,0.34,'Spacecraft frame freq = ' + strtrim(struct.fsc,2) + ' Hz',/normal,charsize=chszxyouts,0.35,0.32,'density = ' + strtrim(struct.dens,2) + ' cm-3',/normal,charsize=chszxyouts,0.3,0.28,'Angle b/t B and vflow: ' + strtrim(acos(total(struct.B_stix*struct.vflow_stix)/struct.Bmag/struct.Vmag)/!dtor,2) + ' degrees',/normal,charsize=chszxyouts,0.3,0.26,'          B and fmax1: ' + strtrim(acos(total(fmax_stix1*struct.B_stix)/struct.fmax_mag/struct.Bmag)/!dtor,2) + ' degrees',/normal,charsize=chszxyouts,0.3,0.24,'          B and fmax2: ' + strtrim(acos(total(fmax_stix2*struct.B_stix)/struct.fmax_mag/struct.Bmag)/!dtor,2) + ' degrees',/normal,charsize=chszxyouts,0.3,0.22,'          fmax1 and vflow: ' + strtrim(acos(total(fmax_stix1*struct.vflow_stix)/struct.fmax_mag/struct.Vmag)/!dtor,2) + ' degrees',/normal,charsize=chszxyouts,0.3,0.20,'          fmax2 and vflow: ' + strtrim(acos(total(fmax_stix2*struct.vflow_stix)/struct.fmax_mag/struct.Vmag)/!dtor,2) + ' degrees',/normal,charsize=chszxyouts,0.3,0.18,'          fint and vflow: ' + strtrim(acos(total(fint_stix*struct.vflow_stix)/struct.fint_mag/struct.Vmag)/!dtor,2) + ' degrees',/normal,charsize=chszxyouts,0.3,0.16,'          fmax1 and fint: ' + strtrim(acos(total(fmax_stix1*struct.fint_stix)/struct.fmax_mag/struct.fint_mag)/!dtor,2) + ' degrees',/normal,charsize=chszxyouts,0.3,0.14,'          fmax2 and fint: ' + strtrim(acos(total(fmax_stix1*struct.fint_stix)/struct.fmax_mag/struct.fint_mag)/!dtor,2) + ' degrees',/normal,charsize=chszend;-------------------------------------------------------------------------------------------------------;-------------------------------------------------------------------------------------------------------pro doppler_shift,field,Bo,vflow,fsc,dens,EorB,$		epol=epol,$		nlevels=nlevels,$		plot_ps=plot_ps,$		plot_struct=plot_structif not keyword_set(plot_struct) then plot_struct = {plot_str:'',$												   coordsys:'?',$			 									   plotdir:'',$			   									   titleroot:'',$			   									   datetime:'?',$			   									   sc:'?'}loadct,39device,decomposed=0	;if not keyword_set(plotdir) then plotdir = '~/Desktop/Research/CIR-SW/Various_plots/Doppler_shift/pframe_freqs/' + strmid(datetime,0,10) + '/'version = 'From doppler_shift.pro version 1.3'struct = {Bo:fltarr(3),$		  vflow:fltarr(3),$		  fmax:fltarr(3),$		  fint:fltarr(3),$		  fmin:fltarr(3),$		  B_stix:fltarr(3),$		  vflow_stix:fltarr(3),$		  fmax_stix1:fltarr(3),$		  fmax_stix2:fltarr(3),$		  fint_stix:fltarr(3),$		  fmin_stix:fltarr(3),$		  Bmag:0.,$		  Vmag:0.,$		  fmax_mag:0.,$		  fint_mag:0.,$		  fmin_mag:0.,$		  datetime:'',$		  sc:'',$		  inputcoord:'',$		  fsc:0.,$		  dens:0.,$		  version:version};number of levels for contour plots. Plots get huge in a hurry when this number is too big. if not keyword_set(nlevels) then nlevels = 50.if not keyword_set(plot_ps) then plot_ps = 'no' else plot_ps = 'yes'if plot_ps eq 'no' then begin	!p.charsize = 1.5endif else begin	!p.charsize = 1.2endelsewindow,1,xsize=550,ysize=500wset,1;----------------------------;INITIAL VARIABLES AND ARRAYS;----------------------------Bmag = sqrt(total(Bo^2))Vmag = sqrt(total(vflow^2))     fce = 28.*Bmagnfreqs = 361.;--------------------------------------------------;GENERATED VALUES FOR THE X-Y AXES OF CONTOUR PLOTS;--------------------------------------------------theta_kb_gen = indgen(361)  ;wave normal angleskmag_gen = indgen(nfreqs)*0.01 + 0.00001 ;wave vectors in 1/km from xxx to xxxnkvals = n_elements(kmag_gen);-------------------------------------------------;CALCULATED VALUES FOR THE Z-AXIS OF CONTOUR PLOTS;------------------------------------------------- ;Create 2D arrays for contour plots - these are calculated values for the z-axisnthetas = n_elements(theta_kb_gen)nfreqs = n_elements(kmag_gen)freqs_gen = dindgen(nthetas)DS = fltarr(nthetas,nfreqs)vphase = fltarr(nthetas,nfreqs)f_pframe = fltarr(nthetas,nfreqs)theta_kv = fltarr(nthetas,nfreqs);---------;CONSTANTS;---------tkb = textoidl("\theta_{kB}^{\circ}")c = 2.99792458d8muo    = 4d0*!DPI*1d-7     ; -Permeability of free space (N/A^2 or H/m)me     = 9.1093897d-31     ; -Electron mass (kg)mp     = 1.6726231d-27     ; -Proton mass (kg)fpe = 8980.*sqrt(dens)BnT2BG = 1e-5               ;nT to GaussVA = 2.18e11*Bmag*BnT2BG/sqrt(dens)/100./1000.  ;Alfven vel in km/sVAe = VA * sqrt(1836)          ;electron Alfven vel (km/sec)erg2joule = 1e-7           ; -ergs to joulese1eV = 1.6e-19              ;joules in 1 eVBnT2BG = 1e-5               ;nT to Gaussmepp = (Bmag*BnT2BG)^2/8/!pi/dens * erg2joule        ;characteristic magnetic energy per particle (joules)Hplus2e_mass = mp/me       ;H+ to electron mass ratio;------------------------------------------------------;VALUES CALCULATED FROM COLD PLASMA DISPERSION RELATION;------------------------------------------------------kvalues = fltarr(n_elements(theta_kb_gen),n_elements(freqs_gen))Elandau = fltarr(n_elements(theta_kb_gen),n_elements(freqs_gen))Ecycl = fltarr(n_elements(theta_kb_gen),n_elements(freqs_gen))Eanom = fltarr(n_elements(theta_kb_gen),n_elements(freqs_gen))vphase = fltarr(n_elements(theta_kb_gen),n_elements(freqs_gen));-----------------------------------------------;find minimum variance field components;-----------------------------------------------vals = my_min_var_rot(field)fmax = vals.eigenvectors[*,2]*vals.eigenvalues[0]fint = vals.eigenvectors[*,1]*vals.eigenvalues[1]fmin = vals.eigenvectors[*,0]*vals.eigenvalues[2]fmax_mag = sqrt(total(fmax^2))fint_mag = sqrt(total(fint^2))fmin_mag = sqrt(total(fmin^2))fmax_hat = fmax/fmax_mag;define Stix coords ---------------zs = [Bo[0]/Bmag,Bo[1]/Bmag,Bo[2]/Bmag]ys = crossp(zs,fmax_hat)ysmag = sqrt(total(ys[0]^2 + ys[1]^2 + ys[2]^2))ys = ys/ysmagxs = crossp(ys,zs)xsmag = sqrt(total(xs[0]^2 + xs[1]^2 + xs[2]^2))xs = xs/xsmag;redefine vectors in Stix coord -----------B_stix = [0,0,Bmag]vflow_stix = [total(vflow*xs),total(vflow*ys),total(vflow*zs)]fmax_stix = [total(fmax*xs),total(fmax*ys),total(fmax*zs)]fint_stix = [total(fint*xs),total(fint*ys),total(fint*zs)]fmin_stix = [total(fmin*xs),total(fmin*ys),total(fmin*zs)];--------------------------------------------------------------------------------;CALCULATE THE FREQUENCY IN PLASMA FRAME FOR EACH ASSUMED VALUE OF K AND THETA_KB;--------------------------------------------------------------------------------for i=0,nthetas-1 do beginfor j=0,nfreqs-1 do begin	khat_tmp = [sin(theta_kb_gen[i]*!dtor),0,cos(theta_kb_gen[i]*!dtor)] 	theta_kv[i,j] = acos(total(khat_tmp*vflow_stix)/1./Vmag)/!dtor   	DS[i,j] = kmag_gen[j]*Vmag*cos(theta_kv[i,j]*!dtor)/2./!pi	f_pframe[i,j] = fsc - DS[i,j]endfor ;nfreqsendfor ;nthetas ;--------------------------------------------;SAVE DATA TO STRUCTURE FOR PLOTTING PURPOSES;--------------------------------------------struct.Bo = Bostruct.vflow = vflowstruct.fmax = fmaxstruct.fint = fintstruct.fmin = fminstruct.B_stix = B_stixstruct.vflow_stix = vflow_stixstruct.fmax_stix1 = fmax_stixstruct.fmax_stix2 = -1*fmax_stixstruct.fint_stix = fint_stixstruct.fmin_stix = fmin_stixstruct.Bmag = Bmagstruct.Vmag = Vmagstruct.fmax_mag = fmax_magstruct.fint_mag = fint_magstruct.fmin_mag = fmin_magstruct.datetime = plot_struct.datetimestruct.sc = plot_struct.scstruct.inputcoord = plot_struct.coordsysstruct.fsc = fscstruct.dens = dens;--------------------------------------------------------------------------------------------------;RELATIVISTIC VALUES CALCULATED FROM COLD PLASMA DISPERSION RELATION AS A FUNCTION OF THETA_KB_GEN AND FREQS_GEN;Assume a particle pitch angle of zero degrees;ex --> k(w,theta_kb);--------------------------------------------------------------------------------------------------pa = 0.  ;pitch angle;test velocitiesvz = indgen(10000)*c/9999. * cos(pa*!dtor)for i=0,nthetas-1 do beginfor j=0,nfreqs-1 do begin		;------k as a function of frequency and theta_kb (Gurnett p4-49) in 1/m	kvalues[i,j] = sqrt(4.*!pi^2*fpe^2*freqs_gen[j]/(c^2*(abs(fce*cos(theta_kb_gen[i]*!dtor))-freqs_gen[j]))) 	kz = abs((kvalues[i,j])*cos(theta_kb_gen[i]*!dtor))	;cyclotron resonance energy	f1cycl = vz	f2cycl = (2*!pi/kz)*(1*fce*sqrt(1-(vz/c/cos(pa*!dtor))^2) - freqs_gen[j])	diff = abs(f1cycl-f2cycl)	tmp = min(diff,val)	vz_cycl = vz[val]   ;m/s	vtots_cycl = vz_cycl/cos(pa*!dtor)  ;electron velocity	;------------------------------------------------	;anomalous resonance energy	f1anom = -1*vz	f2anom = (2*!pi/kz)*(-1*fce*sqrt(1-(vz/c/cos(pa*!dtor))^2) - freqs_gen[j])	diff = abs(f1anom-f2anom)	tmp = min(diff,val)	vz_anom = vz[val]   ;m/s	;vpar2 = (2*!pi/kz)*[fce*sqrt(1-(-1*vz[val]/c/cos(pa*!dtor))^2) - f]  ;m/s	vtots_anom = vz_anom/cos(pa*!dtor)  ;ion velocity	;-----------------------------------------------	;landau resonance energy	vz_landau = 2*!pi*freqs_gen[j]/kz	vtots_landau = vz_landau/cos(pa*!dtor)	;Relativistic energy in eV (e.g. p37 in "Modern Physics, 2nd edition")	Ecycl[i,j] = 0.511d6/sqrt(1-(vtots_cycl^2/c^2)) - 0.511d6	Eanom[i,j] = 0.511d6/sqrt(1-(vtots_anom^2/c^2)) - 0.511d6	Elandau[i,j] = 0.511d6/sqrt(1-(vtots_landau^2/c^2)) - 0.511d6	vphase[i,j] = 2*!pi*freqs_gen[j]/kvalues[i,j]/1000.  ;in km/sec	kvalues[i,j] = kvalues[i,j]*1000. ;in 1/kmendforendfor;------------------------------;DETERMINE RESONANCE CONE ANGLE;------------------------------;as a function of freqftmp = 1000.*lindgen(n_elements(theta_kb_gen))/n_elements(theta_kb_gen)th_res = (1/!dtor)*acos(ftmp/fce)  tr1 = th_res  ;*!dtortr2 = 90. + tr1tr3 = 90. + tr2tr2 = -1*tr2 + 270.tr4 = 90. + tr3tr4 = -1*tr4 + (360. + 270.);as a function of kth_resk = fltarr(n_elements(freqs_gen),n_elements(theta_kb_gen))for i=0,nthetas-1 do beginfor j=0,nkvals-1 do begin	epsilon = 4*!pi^2*fpe^2/((kmag_gen[j]/1000.)^2*c^2*fce)	ftest = cos(!dtor*theta_kb_gen[i])/(1. + epsilon)	th_resk[i,j] = (1/!dtor)*acos(ftest/fce)endforendfor;--------------------------------------------------------------------------;CALCULATE SOLUTIONS TO COLD PLASMA DISPERSION RELATION FOR ALL 4 QUADRANTS;IF USING ELECTRIC FIELD VALUES THEN WE GET THETA_KB AND KMAG FROM COLD PLASMA;IF USING MAGNETIC FIELD WE ONLY GET KMAG FROM COLD PLASMA. THETA_KB COMES;FROM A MIN VARIANCE ANALYSIS AND IS INDEPENDENT OF FREQ;--------------------------------------------------------------------------if EorB eq 'E' then begin	goo = cold_dispersion(epol=epol,freq=freqs_gen,dens=dens,Bo=Bmag)	tkb_goo = goo.theta_kb	kmag_goo = goo.kmagendifif EorB eq 'B' then begin	goo = cold_dispersion(epol=1,freq=freqs_gen,dens=dens,Bo=Bmag) ;get kmag	kmag_goo = goo.kmag	goo = my_min_var_rot(field,bkg_field=Bo,/nomssg)  ;get theta_kb	tkb_goo = goo.theta_kbendif;for the theta_kb, freq contour plotsdispvals_x1 = freqs_gen*cos(!dtor*tkb_goo)dispvals_y1 = freqs_gen*sin(!dtor*tkb_goo)dispvals_x2 = freqs_gen*cos(!dtor*(-1*tkb_goo + 180.))dispvals_y2 = freqs_gen*sin(!dtor*(-1*tkb_goo + 180.))dispvals_x3 = freqs_gen*cos(!dtor*(tkb_goo + 180.))dispvals_y3 = freqs_gen*sin(!dtor*(tkb_goo + 180.))dispvals_x4 = freqs_gen*cos(!dtor*(-1*tkb_goo + 360.))dispvals_y4 = freqs_gen*sin(!dtor*(-1*tkb_goo + 360.))dispvals_x = [[dispvals_x1],[dispvals_x2],[dispvals_x3],[dispvals_x4]]dispvals_y = [[dispvals_y1],[dispvals_y2],[dispvals_y3],[dispvals_y4]];for the theta_kb, kmag contour plotsdispvals2_x1 = kmag_goo*cos(!dtor*tkb_goo)dispvals2_y1 = kmag_goo*sin(!dtor*tkb_goo)dispvals2_x2 = kmag_goo*cos(!dtor*(-1*tkb_goo + 180.))dispvals2_y2 = kmag_goo*sin(!dtor*(-1*tkb_goo + 180.))dispvals2_x3 = kmag_goo*cos(!dtor*(tkb_goo + 180.))dispvals2_y3 = kmag_goo*sin(!dtor*(tkb_goo + 180.))dispvals2_x4 = kmag_goo*cos(!dtor*(-1*tkb_goo + 360.))dispvals2_y4 = kmag_goo*sin(!dtor*(-1*tkb_goo + 360.))dispvals2_x = [[dispvals2_x1],[dispvals2_x2],[dispvals2_x3],[dispvals2_x4]]dispvals2_y = [[dispvals2_y1],[dispvals2_y2],[dispvals2_y3],[dispvals2_y4]];-------------------------------------------------------------------------------------;ASSUMING THAT K-VEC MUST LIE IN THE QUADRANT THAT CONTAINS EMAX IN THE X-Z STIX PLANE;FIND OUT WHICH QUADRANTS THESE ARE;-------------------------------------------------------------------------------------;project into x-z stix plane and switch x,z order because Bo in the plot is along the x-axisvs2 = [struct.vflow_stix[2],struct.vflow_stix[0]]/vmagbs2 = [struct.b_stix[2],struct.b_stix[0]]/bmagfmax2_1 = [struct.fmax_stix1[2],struct.fmax_stix1[0]]/fmax_magfmax2_2 = [struct.fmax_stix2[2],struct.fmax_stix2[0]]/fmax_magquadrants = [0,0,0,0]   ;determines which quadrant to plot inif sign(fmax2_1[0]) eq 1 then begin	if sign(fmax2_1[1]) eq 1 then quadrants[0] = 1	if sign(fmax2_1[1]) eq -1 then quadrants[3] = 1endifif sign(fmax2_1[0]) eq -1 then begin	if sign(fmax2_1[1]) eq 1 then quadrants[1] = 1	if sign(fmax2_1[1]) eq -1 then quadrants[2] = 1endifif sign(fmax2_2[0]) eq 1 then begin	if sign(fmax2_2[1]) eq 1 then quadrants[0] = 1	if sign(fmax2_2[1]) eq -1 then quadrants[3] = 1endifif sign(fmax2_2[0]) eq -1 then begin	if sign(fmax2_2[1]) eq 1 then quadrants[1] = 1	if sign(fmax2_2[1]) eq -1 then quadrants[2] = 1endif;----------------------------;VARIOUS POLAR PLOT CURVES;----------------------------a = fltarr(nfreqs,8)for i=0,7 do a[*,i] = i*45.;freq lines of constant anglexvals2 = fltarr(nfreqs,8)yvals2 = fltarr(nfreqs,8)for i=0,7 do xvals2[*,i] = freqs_gen*cos(a[*,i]*!dtor)for i=0,7 do yvals2[*,i] = freqs_gen*sin(a[*,i]*!dtor);kmag lines of constant angle xvals4 = fltarr(nfreqs,8)yvals4 = fltarr(nfreqs,8)for i=0,7 do xvals4[*,i] = kmag_gen*cos(a[*,i]*!dtor)for i=0,7 do yvals4[*,i] = kmag_gen*sin(a[*,i]*!dtor);angle curves of constant freqr1 = fltarr(nthetas,10)xvals1 = fltarr(nthetas,10)yvals1 = fltarr(nthetas,10)for i=0,9 do r1[*,i] = (i+1)*nfreqs/10.for i=0,9 do xvals1[*,i] = r1[*,i]*cos(theta_kb_gen*!dtor)for i=0,9 do yvals1[*,i] = r1[*,i]*sin(theta_kb_gen*!dtor);angle curves of constant kmagxvals3 = fltarr(nthetas,10)yvals3 = fltarr(nthetas,10)for i=0,9 do r1[*,i] = (i+1)*max(kmag_gen)/10.  ;nfreqs/10.for i=0,9 do xvals3[*,i] = r1[*,i]*cos(theta_kb_gen*!dtor)for i=0,9 do yvals3[*,i] = r1[*,i]*sin(theta_kb_gen*!dtor)f_pframe2 = f_pframetmp = where(f_pframe2 lt 0.)if tmp[0] ne -1 then f_pframe2[tmp] = 0.;------------------------------------------------------;FIRST OFF I ONLY PLOT FREQS FROM 0 TO FCE. HOWEVER, NOT ALL OF THESE SOLUTIONS ARE RIGHT-HANDED;WAVES IN PLASMA FRAME. I NEED TO ELIMINATE SOLUTIONS WHERE Vp HAS A COMPONENT ANTIPARALLEL TO VSW;AND THIS COMPONENT IS LESS THAN THE SOLAR WIND VELOCITY. THESE WAVES ARE LH WAVES THAT ARE CONVECTED;BACKWARDS OVER THE SC, THUS APPEARING TO BE RH IN THE SC FRAME (IN THE WHISTLER FREQ RANGE). ;THESE "BAD" WAVES SATISFY THE CONDITION:   -1 < (vflow/Vp)*cos(theta_kv) < 0 ;I NEED TO CALCULATE THIS CONDITION IN TWO DIFFERENT WAYS FOR THE TWO TYPES OF PLOTS. THE FIRST;TYPE OF PLOT (THE FIRST PLOT ONLY) IS A CALCULATED PLASMA FRAME FREQ VS THETA_KB AND K. FOR EACH;VALUE OF THETA_KB AND K I NEED TO DETERMINE IF THE CALCULATED FREQUENCY IS ACCEPTIBLE. THIS IS ;CALLED TEST#1. THE SECOND TYPE OF PLOT (THE REST OF THE PLOTS) ASSUME A PLASMA FRAME FREQUENCY AND;CALCULATE VARIOUS QUANTITIES BASED IN IT. GOOD VALUES ARE TESTED FOR IN TEST#2. ;---------------------------------------------------------	;--------	;TEST #1	;-------	multiplier = fltarr(nthetas,nkvals)	Q = fltarr(nthetas,nkvals)	theta_bv = sign(struct.vflow_stix[0])*acos(total(struct.B_stix*struct.vflow_stix)/struct.Bmag/struct.Vmag)/!dtor	for i=0,nthetas-1 do begin	for j=0,nkvals-1 do begin		Q[i,j] = 2.*!pi*f_pframe2[i,j]/kmag_gen[j]/vmag		Q[i,j] = Q[i,j]* cos(!dtor*(theta_bv - theta_kb_gen[i]))		if ((Q[i,j] ge -1.) and (Q[i,j] le 0.)) then multiplier[i,j] = 0. else multiplier[i,j] = 1. 	endfor	endfor	;---------	;TEST #2	;---------	tst = (vmag*cos(theta_kv*!dtor))/vphase	tmp2 = where((tst ge -1.) and (tst le 0.))	if tmp2[0] ne -1 then begin		kvalues[tmp2] = 0. ;!values.f_nan		vphase[tmp2] = 0. ;!values.f_nan		ecycl[tmp2] = 0. ;!values.f_nan		elandau[tmp2] = 0. ;!values.f_nan		eanom[tmp2] = 0.  ; !values.f_nan		endif;-----------------------------------;CREATE DIRECTORY IF IT DOESN'T ALREADY EXIST;-----------------------------------if plot_struct.plotdir ne '' then begin	dir_exists = file_info(plot_struct.plotdir)	if dir_exists.directory eq 0 then file_mkdir,plot_struct.plotdirendif;--------;_extra;--------psc1 = {thick:5.8,xthick:5.8,ythick:5.8,zthick:5.8,charsize:1.0,charthick:5.8,xstyle:4,ystyle:4,font:1}xwinc1 = {thick:1.8,xthick:1.8,ythick:1.8,zthick:1.8,charsize:1.4,charthick:1.2,xstyle:4,ystyle:4,font:1};--------------------------------------------------------------------------------------;GET WINDOW SPECS FOR PS PLOT SO I CAN FORCE THE X-WINDOW AND PS WINDOW TO BE IDENTICAL;--------------------------------------------------------------------------------------levels = 256*indgen(nlevels)/(nlevels-1) polar_contour,f_pframe*multiplier,theta_kb_gen*!dtor,kmag_gen,levels=levels,/fill,position=[0.10,0.15,0.80,0.90], $	title='z=Freq_pframe (Hz) (from DS relation), theta=theta_kb, r=|k|',max_value=(fce-1.),min_value = 0., $	xrange=[-1*max(kmag_gen),max(kmag_gen)],_extra=xwinc1,/isotropic,/nodatawinspecs = pswindow()stop;--------------;X-WIN PLOTS;--------------;------ plot plasma frame freq;NOTE THAT THERE IS NO RESONANCE CONE ANGLE IN THESE PLOTS. THIS IS BECAUSE I DON'T ACTUALLY CALCULATE f_pframe FROM;THE DISPERSION RELATION. I JUST ASSUME ALL VALUES OF K AND THETA_KB AND FIND OUT, FROM THE DOPPLER SHIFT RELATION;WHAT THE PLASMA FRAME FREQ WOULD BE. if plot_ps eq 'yes' then set_plot,'ps'if plot_ps eq 'yes' then device,filename = plot_struct.plotdir + 'pframe_freq' + plot_struct.titleroot + '-Dopplershift' + '.ps',/color,_extra=winspecsif plot_ps eq 'yes' then !p.multi = [0,0,1,0,0]cs = bytscl(f_pframe2,min=min(f_pframe2,/nan),max=max(f_pframe2,/nan),/nan)toob = where(cs eq 255.)if toob[0] ne -1 then cs[toob] = 254.polar_contour,cs*multiplier,theta_kb_gen*!dtor,kmag_gen,levels=levels,/fill,position=[0.10,0.15,0.80,0.90], $	title='z=Freq_pframe (Hz) (from DS relation), theta=theta_kb, r=|k|',$  ;max_value=(fce-1.),min_value = 0., $	xrange=[-1*max(kmag_gen),max(kmag_gen)],_extra=xwinc1,/isotropicfor i=0,3 do oplot,quadrants[i]*dispvals2_x[*,i],quadrants[i]*dispvals2_y[*,i],color=220,thick=4oplot,xvals3,yvals3oplot,xvals4,yvals4oplot,[0,vs2[0]],[0,vs2[1]],thick=3,linestyle=2oplot,[0,bs2[0]*fce],[0,bs2[1]*fce],thick=3,linestyle=2oplot,[0,fmax2_1[0]],[0,fmax2_1[1]],thick=3,color=50,linestyle=2oplot,[0,fmax2_2[0]],[0,fmax2_2[1]],thick=3,color=50,linestyle=2colorbar,position=[0.85,0.15,0.90,0.90],/vertical,/right ,range=[min(f_pframe2,/nan),max(f_pframe2,/nan)],charsize=1.2if plot_ps eq 'yes' then plotspecs,struct,fmax_stix1=struct.fmax_stix1,fmax_stix2=struct.fmax_stix2,fint_stix=fint_stixif plot_ps eq 'yes' then device,/closeif plot_ps eq 'yes' then set_plot,'x';------ plot phase velocity if plot_ps eq 'yes' then set_plot,'ps'if plot_ps eq 'yes' then device,filename = plot_struct.plotdir + 'vphase' + plot_struct.titleroot + '-Dispersion' + '.ps',/color,_extra=winspecsif plot_ps eq 'yes' then !p.multi = [0,0,1,0,0]cs = bytscl(vphase,min=min(vphase,/nan),max=max(vphase,/nan),/nan)toob = where(cs eq 255.)if toob[0] ne -1 then cs[toob] = 254.polar_contour,cs*multiplier,theta_kb_gen*!dtor,freqs_gen,$	levels=levels,position=[0.10,0.15,0.80,0.90],/fill,title = 'z=vphase (km/s), theta=theta_kb, r=f_pframe',$	xrange=[-fce,fce],xstyle=4,ystyle=4,_extra=xwinc1,/isotropicfor i=0,3 do oplot,quadrants[i]*dispvals_x[*,i],quadrants[i]*dispvals_y[*,i],color=220,thick=4oplot,xvals1,yvals1oplot,xvals2,yvals2oplot,ftmp*cos(tr1*!dtor),ftmp*sin(tr1*!dtor),thick=2oplot,ftmp*cos(tr2*!dtor),ftmp*sin(tr2*!dtor),thick=2oplot,ftmp*cos(tr3*!dtor),ftmp*sin(tr3*!dtor),thick=2oplot,ftmp*cos(tr4*!dtor),ftmp*sin(tr4*!dtor),thick=2oplot,[0,vs2[0]*fce],[0,vs2[1]*fce],thick=3,linestyle=2oplot,[0,bs2[0]*fce],[0,bs2[1]*fce],thick=3,linestyle=4oplot,[0,fmax2_1[0]*fce],[0,fmax2_1[1]*fce],thick=3,color=50,linestyle=2oplot,[0,fmax2_2[0]*fce],[0,fmax2_2[1]*fce],thick=3,color=50,linestyle=2colorbar,position=[0.85,0.15,0.90,0.90],/vertical,/right ,range=[min(vphase,/nan),max(vphase,/nan)],charsize=1.2if plot_ps eq 'yes' then plotspecs,struct,fmax_stix1=struct.fmax_stix1,fmax_stix2=struct.fmax_stix2,fint_stix=fint_stixif plot_ps eq 'yes' then device,/closeif plot_ps eq 'yes' then set_plot,'x';------ plot |k| for spectrum of freqs in plasma frame and wave normal anglesif plot_ps eq 'yes' then set_plot,'ps'if plot_ps eq 'yes' then device,filename = plot_struct.plotdir + 'kmag_gen' + plot_struct.titleroot + '-Dispersion' + '.ps',/color,_extra=winspecsif plot_ps eq 'yes' then !p.multi = [0,0,1,0,0];cs = bytscl(kvalues,min=min(kvalues,/nan),max=max(kvalues,/nan),/nan)cs = bytscl(alog10(kvalues),min=min(alog10(kvalues),/nan),max=max(alog10(kvalues),/nan),/nan)toob = where(cs eq 255.)if toob[0] ne -1 then cs[toob] = 254.polar_contour,cs*multiplier,theta_kb_gen*!dtor,freqs_gen,levels=levels,/fill,position=[0.10,0.15,0.80,0.90], $	xtitle=tkb,ytitle='freq (plasma frame) (Hz)',title='z=|k| (1/km), theta=theta_kb, r=f_pframe',xrange=[-fce,fce],$	xstyle=4,ystyle=4,_extra=xwinc1,/isotropicfor i=0,3 do oplot,quadrants[i]*dispvals_x[*,i],quadrants[i]*dispvals_y[*,i],color=220,thick=4oplot,xvals1,yvals1oplot,xvals2,yvals2oplot,ftmp*cos(tr1*!dtor),ftmp*sin(tr1*!dtor),thick=2oplot,ftmp*cos(tr2*!dtor),ftmp*sin(tr2*!dtor),thick=2oplot,ftmp*cos(tr3*!dtor),ftmp*sin(tr3*!dtor),thick=2oplot,ftmp*cos(tr4*!dtor),ftmp*sin(tr4*!dtor),thick=2oplot,[0,vs2[0]*fce],[0,vs2[1]*fce],thick=3,linestyle=2oplot,[0,bs2[0]*fce],[0,bs2[1]*fce],thick=3,linestyle=4oplot,[0,fmax2_1[0]*fce],[0,fmax2_1[1]*fce],thick=3,color=50,linestyle=2oplot,[0,fmax2_2[0]*fce],[0,fmax2_2[1]*fce],thick=3,color=50,linestyle=2colorbar,position=[0.85,0.15,0.90,0.90],/vertical,/right ,range=[min(kvalues,/nan),max(kvalues,/nan)],charsize=1.2,/ylog,format='(E6.0)'if plot_ps eq 'yes' then plotspecs,struct,fmax_stix1=struct.fmax_stix1,fmax_stix2=struct.fmax_stix2,fint_stix=fint_stixif plot_ps eq 'yes' then device,/closeif plot_ps eq 'yes' then set_plot,'x';------ plot Landau res energyif plot_ps eq 'yes' then set_plot,'ps'if plot_ps eq 'yes' then device,filename = plot_struct.plotdir + 'landau_res' + plot_struct.titleroot + '-Dispersion' + '.ps',/color,_extra=winspecsif plot_ps eq 'yes' then !p.multi = [0,0,1,0,0]cs = bytscl(Elandau,min=min(Elandau,/nan),max=max(Elandau,/nan),/nan)toob = where(cs eq 255.)if toob[0] ne -1 then cs[toob] = 254.polar_contour,cs*multiplier,theta_kb_gen*!dtor,freqs_gen,levels=levels,position=[0.10,0.15,0.80,0.90], $	xtitle=tkb,ytitle='Freq (pframe) '+'(Hz)',title='z=rel Elandau total (eV) for PA=0 deg, theta=theta_kb, r=f_pframe',/fill,xrange=[-fce,fce],xstyle=4,ystyle=4,_extra=xwinc1,/isotropicfor i=0,3 do oplot,quadrants[i]*dispvals_x[*,i],quadrants[i]*dispvals_y[*,i],color=220,thick=4oplot,xvals1,yvals1oplot,xvals2,yvals2oplot,ftmp*cos(tr1*!dtor),ftmp*sin(tr1*!dtor),thick=2oplot,ftmp*cos(tr2*!dtor),ftmp*sin(tr2*!dtor),thick=2oplot,ftmp*cos(tr3*!dtor),ftmp*sin(tr3*!dtor),thick=2oplot,ftmp*cos(tr4*!dtor),ftmp*sin(tr4*!dtor),thick=2oplot,[0,vs2[0]*fce],[0,vs2[1]*fce],thick=3,linestyle=2oplot,[0,bs2[0]*fce],[0,bs2[1]*fce],thick=3,linestyle=4oplot,[0,fmax2_1[0]*fce],[0,fmax2_1[1]*fce],thick=3,color=50,linestyle=2oplot,[0,fmax2_2[0]*fce],[0,fmax2_2[1]*fce],thick=3,color=50,linestyle=2colorbar,position=[0.85,0.15,0.90,0.90],/vertical,/right ,range=[min(Elandau,/nan),max(Elandau,/nan)],charsize=1.2if plot_ps eq 'yes' then plotspecs,struct,fmax_stix1=struct.fmax_stix1,fmax_stix2=struct.fmax_stix2,fint_stix=fint_stixif plot_ps eq 'yes' then device,/closeif plot_ps eq 'yes' then set_plot,'x';------ plot cyclotron res energyif plot_ps eq 'yes' then set_plot,'ps'if plot_ps eq 'yes' then device,filename = plot_struct.plotdir + 'cycl_res' + plot_struct.titleroot + '-Dispersion' + '.ps',/color,_extra=winspecsif plot_ps eq 'yes' then !p.multi = [0,0,1,0,0]cs = bytscl(alog10(Ecycl),min=min(alog10(Ecycl),/nan),max=max(alog10(Ecycl),/nan),/nan)toob = where(cs eq 255.)if toob[0] ne -1 then cs[toob] = 254.polar_contour,cs*multiplier,theta_kb_gen*!dtor,freqs_gen,levels=levels,position=[0.10,0.15,0.80,0.90], $	xtitle=tkb,ytitle='Freq (pframe) '+'(Hz)',title='z=rel Ecycl total (eV) for PA=0 deg, theta=theta_kb, r=f_pframe',/fill,xrange=[-fce,fce],xstyle=4,ystyle=4,_extra=xwinc1,/isotropicfor i=0,3 do oplot,quadrants[i]*dispvals_x[*,i],quadrants[i]*dispvals_y[*,i],color=220,thick=4oplot,xvals1,yvals1oplot,xvals2,yvals2oplot,ftmp*cos(tr1*!dtor),ftmp*sin(tr1*!dtor),thick=2oplot,ftmp*cos(tr2*!dtor),ftmp*sin(tr2*!dtor),thick=2oplot,ftmp*cos(tr3*!dtor),ftmp*sin(tr3*!dtor),thick=2oplot,ftmp*cos(tr4*!dtor),ftmp*sin(tr4*!dtor),thick=2oplot,[0,vs2[0]*fce],[0,vs2[1]*fce],thick=3,linestyle=2oplot,[0,bs2[0]*fce],[0,bs2[1]*fce],thick=3,linestyle=4oplot,[0,fmax2_1[0]*fce],[0,fmax2_1[1]*fce],thick=3,color=50,linestyle=2oplot,[0,fmax2_2[0]*fce],[0,fmax2_2[1]*fce],thick=3,color=50,linestyle=2colorbar,position=[0.85,0.15,0.90,0.90],/vertical,/right ,range=[min(Ecycl,/nan),max(Ecycl,/nan)],charsize=1.2,/ylog,format='(E6.0)'if plot_ps eq 'yes' then plotspecs,struct,fmax_stix1=struct.fmax_stix1,fmax_stix2=struct.fmax_stix2,fint_stix=fint_stixif plot_ps eq 'yes' then device,/closeif plot_ps eq 'yes' then set_plot,'x';----- plot anomalous res energy if plot_ps eq 'yes' then set_plot,'ps'if plot_ps eq 'yes' then device,filename = plot_struct.plotdir + 'anom_res' + plot_struct.titleroot + '-Dispersion' + '.ps',/color,_extra=winspecsif plot_ps eq 'yes' then !p.multi = [0,0,1,0,0]cs = bytscl(alog10(Eanom),min=min(alog10(Eanom),/nan),max=max(alog10(Eanom),/nan),/nan)toob = where(cs eq 255.)if toob[0] ne -1 then cs[toob] = 254.polar_contour,cs*multiplier,theta_kb_gen*!dtor,freqs_gen,levels=levels,position=[0.10,0.15,0.80,0.90], $	xtitle=tkb,ytitle='Freq (pframe) '+'(Hz)',title='z=rel Eanom total (eV) for PA=0 deg, theta=theta_kb, r=f_pframe',/fill,xrange=[-fce,fce],xstyle=4,ystyle=4,_extra=xwinc1,/isotropicfor i=0,3 do oplot,quadrants[i]*dispvals_x[*,i],quadrants[i]*dispvals_y[*,i],color=220,thick=4oplot,xvals1,yvals1oplot,xvals2,yvals2oplot,ftmp*cos(tr1*!dtor),ftmp*sin(tr1*!dtor),thick=2oplot,ftmp*cos(tr2*!dtor),ftmp*sin(tr2*!dtor),thick=2oplot,ftmp*cos(tr3*!dtor),ftmp*sin(tr3*!dtor),thick=2oplot,ftmp*cos(tr4*!dtor),ftmp*sin(tr4*!dtor),thick=2oplot,[0,vs2[0]*fce],[0,vs2[1]*fce],thick=3,linestyle=2oplot,[0,bs2[0]*fce],[0,bs2[1]*fce],thick=3,linestyle=4oplot,[0,fmax2_1[0]*fce],[0,fmax2_1[1]*fce],thick=3,color=50,linestyle=2oplot,[0,fmax2_2[0]*fce],[0,fmax2_2[1]*fce],thick=3,color=50,linestyle=2colorbar,position=[0.85,0.15,0.90,0.90],/vertical,/right ,range=[min(Eanom,/nan),max(Eanom,/nan)],charsize=1.2,/ylog,format='(E6.0)'if plot_ps eq 'yes' then plotspecs,struct,fmax_stix1=struct.fmax_stix1,fmax_stix2=struct.fmax_stix2,fint_stix=fint_stixif plot_ps eq 'yes' then device,/closeif plot_ps eq 'yes' then set_plot,'x'end